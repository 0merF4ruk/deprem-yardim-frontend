
# https://github.com/OskarAhl/Lighthouse-github-action-comment/blob/main/.github/workflows/lighthouse-on-vercel-preview-url.yml
# Extended the example implementation above

name: Vercel Preview URL Lighthouse Audit
on: [push]

permissions:
  issues: 'write'
  pull-requests: write

jobs:
  generate_lighthouse_audit:
    timeout-minutes: 30
    if: needs.pr-check.outputs.number != 'null'
    runs-on: ubuntu-latest
    steps:
      - name: Capture Vercel preview URL
        id: vercel_preview_url
        uses: aaron-binary/vercel-preview-url-action@v0.0.3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Preview Link's Lighthouse Score
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: |
            ${{ steps.vercel_preview_url.outputs.vercel_preview_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
      - uses: actions/checkout@v2
      - name: Canary Environment's Lighthouse Score
        id: canary_audit
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: https://rc.afetharita.com/
          uploadArtifacts: true
          temporaryPublicStorage: true
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const results = [
                { link: ${{ steps.lighthouse_audit.outputs.links }}, result: ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary },
                { link: ${{ steps.canary_audit.outputs.links }}, result: ${{ steps.canary_audit.outputs.manifest }}[0].summary },
            ]

            const formatResult = (res) => Math.round(res * 100);
            const score = (score) => (score >= 90 ? "ðŸŸ¢" : score >= 50 ? "ðŸŸ " : "ðŸ”´");
            const keys = ["performance", "best-practices", "seo", "pwa"];

            function getScores({ result }) {
              return [...keys].map(
                (key) => `${result[key]} ${score(formatResult(result[key]))}`
              );
            }

            function createTable() {
              const scores = results.map((data) => getScores(data));
              const rows = [];

              for (const [index, key] of keys.entries()) {
                rows.push(
                  `<tr>
                      <td>${key}</td>
                      <td>${scores[0][index]}</td>
                      <td>${scores[0][index]}</td>
                    </tr>`
                );
              }

              return `
                <table>
                  <tr>
                    <th>Key</th>
                    <th>Score</th>
                    <th></th>
                  </tr>
                  <tr>
                    <td></td>
                    <td>${Object.keys(results[0].link)[0]}</td>
                    <td>${Object.keys(results[1].link)[0]}</td>
                  </tr>
                  ${rows.join("\n")}
                </table>
              `;
            }

            core.setOutput("comment", createTable());

      - uses: jwalton/gh-find-current-pr@v1
        id: finder
      - name: Pr number
        run: echo ${{ steps.finder.outputs.pr }}
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ steps.finder.outputs.pr }}
          body: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
